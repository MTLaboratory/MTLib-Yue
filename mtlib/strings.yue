if not RootPath then error("RootPath not set!")
import types from require("#{RootPath}constants")
-- logic = require("#{RootPath}logic")

getValueAddress =(f, l)->
	if ((l == nil) and type(f) == types.TABLE) then l = true
	return ("#{((l and "0x") or "")}#{(tostring(f)\gsub("%a*:%s*0?", "")\upper!)}")

serialize =(what, maxDepth=50, depth=0, seen={})->
	tokens = {
		[types.NIL]: tostring
		[types.FUNC]: tostring
		[types.USERDATA]: tostring
		[types.THREAD]: tostring
		[types.BOOL]: tostring
		[types.STRING]: (s)-> string.format("%q", s)
		[types.NUMBER]: (num)-> string.format("%f", num) -- lua numbers are floats.
		[types.TABLE]: (t)->
			rtn = {}
			seen[t] = tostring t
			depth += 1
			tab = ("\t")\rep(depth)
			is_class = (t.__class != nil)
			class_id = if what.__class then
				"class: #{tostring(t)\gsub("table: ", "")} " else ""
			if (depth > maxDepth) then
				members = 0
				for k,v in pairs(t) do
					if (k != "__parent") then members += 1
				return if is_class then class_id else "#{t} ||#{members}"
			for k,m in pairs(t) do
				if (k == "__parent") then continue
				rtn[(#rtn)+1] = if (seen[m] != nil) then
					(tab.."[#{tostring k}] = recursion(#{tostring(m)})\n")
				else
					(tab.."[#{tostring k}] = #{serialize(m, maxDepth, depth, seen)}\n")
			seen[t] = nil
			return (class_id.."{\n"..table.concat(rtn, "")..("\t")\rep(depth - 1).."}")
	}
	(tokens[type(what)](what, seen))

generateUUID =()->
	fn =(x)->
		r = (math.random(16)-1)
		r = ((x == "x") and (r+1) or (r%4)+9)
		return ("0123456789abcdef"\sub(r, r))
	("xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"\gsub("[xy]", fn))

{
	:generateUUID
	:getValueAddress
	:serialize
}